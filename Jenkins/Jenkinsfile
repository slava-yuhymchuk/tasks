pipeline {
    agent any
    environment {
        // CODE_CNANGE = getGitChanges()
        TELEGRAM_CHAT_ID = '5841993506'
        REGISTRY_FE = "slavayuhymchuk/tasks_fe"
        REGISTRY_BE = "slavayuhymchuk/tasks_be"
        REGISTRY_CRED = "dockerhub-accesstoken"
        VERSION_FE = "1.1" // to get from code
        VERSION_BE = "1.0" // to get from code
    }
    stages {
        stage ("Build BE") {
            steps {
                echo "Building BE docker image ${VERSION_BE}"
                dir ("Python & Docker/BE") {
                    script {
                        IMAGE_BE = docker.build REGISTRY_BE + ":${VERSION_BE}"
                        IMAGE_BE_LATEST = docker.build REGISTRY_BE + ":latest"
                    }
                }
            }
        }
        stage('Run Trivy Scan Frontend') {
            steps {
                script {
                    // Run Trivy scan and save output to file
                    sh 'trivy image slavayuhymchuk/tasks_fe:latest > TrivyScan_Frontend'
                }
            }
        }
        stage('Telegram TrivyScan Frontend') {
            steps {
                script {
                    // Send the tasks_fe file via Telegram
                    sh """
                    curl -s -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendDocument \
                    -F chat_id=${TELEGRAM_CHAT_ID} \
                    -F document=@TrivyScan_Frontend \
                    -F caption="Trivy Scan Report - Build_ID:${env.BUILD_ID} Name:${env.JOB_NAME}"
                    """
                }
            }
        }
        stage('Run Trivy Scan Backend') {
            steps {
                script {
                    // Run Trivy scan and save output to file
                    sh 'trivy image slavayuhymchuk/tasks_be:latest > TrivyScan_Backend'
                }
            }
        }
        stage('Telegram TrivyScan Backend') {
            steps {
                script {
                    // Send the tasks_fe file via Telegram
                    sh """
                    curl -s -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendDocument \
                    -F chat_id=${TELEGRAM_CHAT_ID} \
                    -F document=@TrivyScan_Backend \
                    -F caption="Trivy Scan Report - Build_ID:${env.BUILD_ID} Name:${env.JOB_NAME}"
                    """
                }
            }
        }
        stage ("Test") {
            steps {
                echo "Starting test for FE ${VERSION_FE} and BE ${VERSION_BE}"
                script {
                    // Create custom Docker network.
                    echo "Creating docker network"
                    sh "docker network create tasks"
                    // Run BE container
                    echo "Starting BE container for testing"
                    sh "docker run -d --network tasks -p 5000:5000 --name tasks-be ${REGISTRY_BE}:${VERSION_BE}"
                    // Run FE container
                    echo "Starting FE container for testing"
                    sh "docker run -d --network tasks -p 80:80 --env BE_URL=http://tasks-be:5000/be --env FE_PORT=80 --name tasks-fe ${REGISTRY_FE}:${VERSION_FE}"
                    // Back-End Test
                    echo "Running Back-End Tests"
                    try {
                        sh "curl http://localhost:5000/be/read_file"
                        echo "Back-End Test Passed"
                    }
                    catch (Exception e) {
                        echo "Back-End Test Failed"
                    }
                    // Front-End Test
                    echo "Running Front-End Tests"
                    try {
                        sh "curl http://localhost/tasks"
                        echo "Front-End Test Passed"
                    }
                    catch (Exception e) {
                        echo "Front-End Test Failed"
                    }
                    // Stop the containers after tests
                    echo "Stopping test containers"
                    sh "docker stop tasks-fe"
                    sh "docker stop tasks-be"
                    // Remove the containers
                    echo "Removing test containers"
                    sh "docker rm tasks-fe"
                    sh "docker rm tasks-be"
                    // Remove the custom Docker network..
                    echo "Removing docker network"
                    sh "docker network rm tasks"
                }
            }
        }
        stage ("Push FE") {
            steps {
                echo "Pushing FE ${VERSION_FE} to Docker Hub"
                script {
                    docker.withRegistry("", REGISTRY_CRED) {
                        IMAGE_FE.push()
                        IMAGE_FE_LATEST.push()
                    }
                } 
            }
        }
        stage ("Push BE") {
            steps {
                echo "Pushing BE ${VERSION_BE} to Docker Hub"
                script {
                    docker.withRegistry("", REGISTRY_CRED) {
                        IMAGE_BE.push()
                        IMAGE_BE_LATEST.push()
                    }
                } 
            }
        }
    }
    post {
        success {
            sh """
            curl -s -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage -d chat_id=${TELEGRAM_CHAT_ID} -d text="Pipeline Completed Successfully Build_ID:${env.BUILD_ID} Name:${env.JOB_NAME} "
            """
        }
        failure {
            sh """
            curl -s -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage -d chat_id=${TELEGRAM_CHAT_ID} -d text="Pipeline Failed Build:${env.BUILD_ID} Name:${env.JOB_NAME} "
            """
        }
        always {
            echo "Finished pipeline"
        }
    }
}
